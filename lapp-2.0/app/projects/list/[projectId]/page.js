import ProjectContainer from "@/components/Projects/ProjectContainer";
import Layout from "@/components/Layout/layout";
import Head from "next/head";
import { prisma } from "@/pages/api/_prisma";

function Project({
  project,
  quotes,
  sales_org,
  vertical_market,
  channel,
  region,
  state,
  competitors,
  customer,
}) {
  return (
    <Layout>
      <Head>
        <title>Project Overview</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProjectContainer
        project={project}
        quotes={quotes}
        sales_org={sales_org}
        vertical_market={vertical_market}
        channel={channel}
        region={region}
        state={state}
        competitors={competitors}
        customer={customer}
      />
    </Layout>
  );
}

export default Project;

export async function getServerSideProps({ params }) {
  const project = await prisma.project.findFirst({
    where: { project_id: Number(params.projectId) },
    include: {
      Sales_Org: true,
      State: true,
      Region: true,
      Channel: true,
      Vertical_Market: true,
      Employees_Project_created_byToEmployees: true,
      Employees_Project_modified_byToEmployees: true,
      Project_Competitor: {
        include: {
          Competitor: true,
        },
        where: { is_active: true },
      },
      Project_Sap_Order: {
        select: { project_id: true, sap_order_id: true },
        where: { is_active: true },
      },
    },
  });

  const quotes = await prisma.quote.findMany({
    where: { project_id: project.project_id, is_active: true },
    include: { Customer: true, Account_Manager: true, DSM: true },
    orderBy: [{ quote_id: "desc" }, { quote_version: "desc" }],
  });

  const sales_org = await prisma.sales_Org.findMany({
    where: { is_active: true },
  });
  const vertical_market = await prisma.vertical_Market.findMany({
    where: { is_active: true },
  });
  const channel = await prisma.channel.findMany({ where: { is_active: true } });
  const region = await prisma.region.findMany({
    where: { sales_org_id: project.sales_org_id, is_active: true },
    include: { Sales_Org: true },
  });
  const state = await prisma.state.findMany({
    where: { sales_org_id: project.sales_org_id },
    include: { Sales_Org: true },
  });
  const competitors = await prisma.competitor.findMany({
    where: { sales_org_id: project.sales_org_id, is_active: true },
  });
  const customer = await prisma.customer.findMany();

  return {
    props: {
      project: JSON.parse(JSON.stringify(project)),
      quotes: JSON.parse(JSON.stringify(quotes)),
      sales_org: JSON.parse(JSON.stringify(sales_org)),
      vertical_market: JSON.parse(JSON.stringify(vertical_market)),
      channel: JSON.parse(JSON.stringify(channel)),
      region: JSON.parse(JSON.stringify(region)),
      state: JSON.parse(JSON.stringify(state)),
      competitors: JSON.parse(JSON.stringify(competitors)),
      customer: JSON.parse(JSON.stringify(customer)),
    },
  };
}
